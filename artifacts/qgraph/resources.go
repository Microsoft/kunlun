// Code generated by "esc -pkg qgraph -prefix  -ignore  -include  -o resources.go manifests"; DO NOT EDIT.

package qgraph

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/manifests/error.yml": {
		name:    "error.yml",
		local:   "manifests/error.yml",
		size:    13,
		modtime: 1543299825,
		compressed: `
H4sIAAAAAAAC/9JVyEvMTbVSSC0qyi8CBAAA///rGPd6DQAAAA==
`,
	},

	"/manifests/java.yml": {
		name:    "java.yml",
		local:   "manifests/java.yml",
		size:    782,
		modtime: 1543452137,
		compressed: `
H4sIAAAAAAAC/8ySQW7yMBCF9znFkzes4ACW0L/8j1B1hUbOpDV1bDoeg3L7KsEhCtBK3XWbvPnmy5ts
EalniyOdqQE+C2f1KWbbAMAWZ5LDNWE6oZ4vST7M9A5oOTvxpzFvYV7eSXHLYEgFJIySfXz7N484iq1v
SbkumJeEwhaaekd6e36/4DUVwUnSkZ0u6Dq1M4+8iw9tF4bfAuvYCFShmP2qkKWuw8rXpdj6Cl5a2O+x
ucY25hGwFvyeUHMb0zTPBX48m48UDiTqO3I613RiyT4rR7VQKfz0pP8L5zxeUjBRMFPgs13+go5KUAuT
ewqhSu2GPtzrLp/7l3yr1ST8FQAA//8+TEmbDgMAAA==
`,
	},

	"/manifests/jmeter.yml": {
		name:    "jmeter.yml",
		local:   "manifests/jmeter.yml",
		size:    493,
		modtime: 1543388100,
		compressed: `
H4sIAAAAAAAC/3SQTWrDMBCF9z7FQ5uskgMIsmqhxzCDNKYq+nE1o4JvX2zZbUzTWb+fed8VmRJbfCRW
rgPw2Vg0lCx2AIArvqiOXWO6aPQ8x7IkzjrqMrPZhIBncTXMq9nCvLyXIoyltIpfA1aDPRyOsg+elPey
ozA2tpBEMY4/fx13bnndkkFdDRebKFeUaR90W6u0UpZwGtUHPalwJfuwhz+fi/sdl0fnxQzDP4knmCeU
U8gUR6oaJnLagcxcJYhyVgutjYe/e98ai3SoWwKOBATZsXqeqEW1MI/P3JYUzXcAAAD//xjOPM3tAQAA
`,
	},

	"/manifests/kubernetes.yml": {
		name:    "kubernetes.yml",
		local:   "manifests/kubernetes.yml",
		size:    554,
		modtime: 1543299825,
		compressed: `
H4sIAAAAAAAC/4SRTW7rMAyE9z7FQJuskgMIyOo9oMcQWItuhcqUK1IFfPvCsY3E6J/WnPk0M2cIjezx
1p65ChtrB7w3VktF1HcAcMYH1bDeufthiDzlMo8sFmye2N2Ogcja1zQtBh7u32spyphLq7gLsAj8ruhJ
YopkvAF3aG7soUleMgcpkcPhl/s78v7fGKBNZ0WwSFGGh4yXhWyVRNMh55rxV2JfJKaN9XMXuF5x+t7n
5LruT9JhgUP/QxLKgaqlgXpbG5y4alJjMQ+rjbuvtTw1Vl1XuDlgd0DSbYfIA7VsHk5HyvnhQ5d5zO4z
AAD//2ut96QqAgAA
`,
	},

	"/manifests/load_test.yml": {
		name:    "load_test.yml",
		local:   "manifests/load_test.yml",
		size:    411,
		modtime: 1543452137,
		compressed: `
H4sIAAAAAAAC/6TQsU7EMBAE0D5fMbom1V16/wiltcR7iiHxmvUaC74eGSsnIURFa814n+aKRAc77ELB
GxebgLfKxaKk4iYAuOKd1I/Yy8HG6h9pzylkicn8WUoUlb97QGYtsRgnczCt53PgsmrMPe1wedrI5oIP
qYrzN5jgmdEvcLg8anequznMm1l2y9Jau9FnVb6tcsx/WZWzqPldVtp96OZ/UFkZQToWjYYzSEt9D9g2
xBgXf7MXO3JnmlIq8cfCQ0xq8U6r+deYwvQVAAD//wUJAPabAQAA
`,
	},

	"/manifests/main.yml": {
		name:    "main.yml",
		local:   "manifests/main.yml",
		size:    2989,
		modtime: 1543452137,
		compressed: `
H4sIAAAAAAAC/5xVzW7zOAy85ykI7yGXNg8QoCgWKPbaS4FiTwZrM7FqR9JHUSny9h8k/8SuZTfpLXDI
ITXDIR9B44n2wMbIBuCPJyfKaLffAAA8whk5byOwPCkdf8e/ACyxU05Iyx6Eff+5JFewsgFlD9m/ISvW
AHOAi/EMJdnGXE6k5Tkbcg7oG9lDVjfeEWez6o0pMEDeU/u9UkUFTEdlNJQmVIcv1AJiuiZATKIHQife
zXtgcsZzQfmRjbd3U/FeoQwYEDFaYkatPc+ronbqo6G8Mk7ymi55UVFRK328p/bL6PVOWBUCzlUQMKGm
C/SYAxsF6lKVKNRNQt9V42kPGbo6Gz7PJHc1HAy3YqO1bM7YwFdFUYRk2V2WKKLNco0XA9pIwFvCGlP4
eSIhzhuDZS7kJCeNHw2Vv2UQIUBBgAI8CDFIRam5XmVx+8aetotPfDPQtnkt5na7FFPb/7Bx60iuVnaO
IxyGa+L33m0dU/07jC5Vh7ZEJjw9dU/KJljIog5YSF4rXd6L174s22yW0FYW1qheai+Ev8NO6hFdwoc/
KKj0gdEJ+0I80xr/19mIozJNdA/QqDp07D+INQktCI3WNmqyB1eKDf7rU+BLSQWFKamvZyv7AJ94xp/m
IfnQsYiRzCDYNPL7KMz6T2KMwibST7KXZxf10eORronDl9VxySybTyok75Z8ICq3KFW2sCbgH3h7fXkF
LEtw3lrDEvdeEFiYCAYawpiFr2dkFWbb7Rbmkpi2LoZ2VyI0MRzOrsHEjRh6PyrJmc7KKaOz39zKNjV9
LROn8oROUuc66zmPPs1usGGfAMgUa3t38z2ylV30w/8j5iJ2xA0pQ8mU1YIr7sUMOVPQxSG9djx2wIS0
aAVb2W8eGjW2nhoCx/aZeXjNCzE4l4ulW7SbQq9NzqqM1/V3w3bDUTgUjQ9zmBQynpebANvQCdiigLNe
x2Jc2YtKXGO/aznubQWgjdtmfwMAAP//6e0HnK0LAAA=
`,
	},

	"/manifests/php.yml": {
		name:    "php.yml",
		local:   "manifests/php.yml",
		size:    1131,
		modtime: 1543299825,
		compressed: `
H4sIAAAAAAAC/8ySwW6rMBBF9/mKKy+yy1Nel1bbbX+ge2SRobFkGzozrsrfV4QAgdKq2cEOae6Zo7k+
ILlIFs252QHvmUR9ncTuAOCAD8dFP2DKOpWZmZIWWYjNZQLQtiELn/T6fyIp2TcdxcK8nglTEENQ2SXx
s039FokuhKKX6b6yTid/ZS0E8PiE/8ejmeUjnXyOfwQ8d3ns91gnL9DB8RvdQ/4J/fANHd2nj3do94Td
2tF+a7DyyYXCsfrKlToU2BCLF6WkFsqZVnt8ySSCts6MCwUDBV6sGSOVy0EtzGj0r43hxnRWzzZUJ6WF
623f21AdjZZXnT2fjZx1cuptga8AAAD//0VGz3BrBAAA
`,
	},

	"/manifests": {
		name:  "manifests",
		local: `manifests`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"manifests": {
		_escData["/manifests/error.yml"],
		_escData["/manifests/java.yml"],
		_escData["/manifests/jmeter.yml"],
		_escData["/manifests/kubernetes.yml"],
		_escData["/manifests/load_test.yml"],
		_escData["/manifests/main.yml"],
		_escData["/manifests/php.yml"],
	},
}

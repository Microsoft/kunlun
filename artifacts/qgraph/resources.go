// Code generated by "esc -pkg qgraph -prefix  -ignore  -include  -o resources.go manifests"; DO NOT EDIT.

package qgraph

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/manifests/error.yml": {
		name:    "error.yml",
		local:   "manifests/error.yml",
		size:    13,
		modtime: 1543231989,
		compressed: `
H4sIAAAAAAAC/9JVyEvMTbVSSC0qyi8CBAAA///rGPd6DQAAAA==
`,
	},

	"/manifests/java.yml": {
		name:    "java.yml",
		local:   "manifests/java.yml",
		size:    796,
		modtime: 1543503443,
		compressed: `
H4sIAAAAAAAC/8yRwW6DMAyG7zyFlQun9gEiVTvuEaadkBXMli4kzHZa8fYTNBTRdpN26xV+f/7yewcR
e7JwxBNWAN+ZRH2KYisAgB2ckJtLwnSMPZ0Tf5n5H0BL4tgPU96CeftEhWsGxpQBmSCLjx8vy4jD2PoW
lcqCZUnIZEFT71Cv328XvKfMMHA6ktMVXab25p539qHtwvhfYBmbgMoYxW8KWetqNr4uxdYX8NrC4QD1
JVabe8BW8HdCydWmqh4L/Hk2HzE0yOo7dLrUNBCLF6WoFpQzPTzpayaR6ZIMMwUWCnixZtUWxahNad1I
jyEUt/3Yh1vr9dVPqF3kZu+fAAAA//8dwwm2HAMAAA==
`,
	},

	"/manifests/jmeter.yml": {
		name:    "jmeter.yml",
		local:   "manifests/jmeter.yml",
		size:    500,
		modtime: 1543503449,
		compressed: `
H4sIAAAAAAAC/3SQTWrDMBCF9z7FQ5uskgMIsmqhxxCDPKYqsuRqRgXfvtiS25ims34/874rEs1s8TGz
chmAz8qiISexAwBc8UXFNY1pIjfyEvM6c1Kn68JmFwIjiy9h2cwW5uU9Z2GsuRb8GrAZ7OHwlMYwknIv
OwpjZQuZKUb389dx55bXPRnU1PCxinJBnvqg21alhZKE06g26EmFz2kMPfz5XNzvuDw6L2YY/kk8wTyh
nEKi6KhomMhrA7JwkSDKSS20VB7+7n2rLNKg7gk4EhCkY/U5iVJS1zmax59u6xzNdwAAAP//9mwI7PQB
AAA=
`,
	},

	"/manifests/kubernetes.yml": {
		name:    "kubernetes.yml",
		local:   "manifests/kubernetes.yml",
		size:    561,
		modtime: 1543503446,
		compressed: `
H4sIAAAAAAAC/4SRS27zMAyE9z7FQJuskgMIyOr/gR5DYC2mFSpTrkgV8O0Lv5AYfWnNmU8zc4bQwB5v
7ZmrsLF2wHtjtVREfQcAZ3xQDeudux+GyGMu08BiwaaR3XIMRNa+pnE28HD/XktRxlRaxV2AWeB3RU8S
UyTjDbhDc2MPTfKSOUiJHA6/3N+R939hgDadFcEsRbk9ZLzMZKskmg4514y/EvsiMW2sn7vA9YrT9z4n
13V/kg4LHPq/JaEcqFq6UW9rgyNXTWos5mG1cfe1lqfGqusKiwN2ByTdduiLqJFY2Ip3OlDOD/+6TEN2
nwEAAP//zZXusjECAAA=
`,
	},

	"/manifests/load_test.yml": {
		name:    "load_test.yml",
		local:   "manifests/load_test.yml",
		size:    411,
		modtime: 1543408482,
		compressed: `
H4sIAAAAAAAC/6TQsU7EMBAE0D5fMbom1V16/wiltcR7iiHxmvUaC74eGSsnIURFa814n+aKRAc77ELB
GxebgLfKxaKk4iYAuOKd1I/Yy8HG6h9pzylkicn8WUoUlb97QGYtsRgnczCt53PgsmrMPe1wedrI5oIP
qYrzN5jgmdEvcLg8anequznMm1l2y9Jau9FnVb6tcsx/WZWzqPldVtp96OZ/UFkZQToWjYYzSEt9D9g2
xBgXf7MXO3JnmlIq8cfCQ0xq8U6r+deYwvQVAAD//wUJAPabAQAA
`,
	},

	"/manifests/main.yml": {
		name:    "main.yml",
		local:   "manifests/main.yml",
		size:    3167,
		modtime: 1543500733,
		compressed: `
H4sIAAAAAAAC/5xVzW7jOAy+5ykI7yGXmTxAgMFggWKvvRRY7MlgbSZW7UhakUqRtx9I/o9lN+ktkcmP
5MeP5E/QeKEjOGNkB/C/JxZlNB93AAA/4Youby2wvCgdf8dPAJYcKxbScgRxvn8uiQunbEA5QvZvhdK6
xkBQGrgZD5+oBU7GhT8OSrKNuV1Iy+9sQDmhb+QIWd14Jpct8mlMgSHIc9moogJHZ2X0LBUxXRIgJpED
IYvnZQ6O2HhXUH52xtvvkdNjQMRYsPR7GRU1q/eG8sqw5DXd8qKiolb6/Ezsl0n1LE4VAswVBEyo6QY9
5sBGgbpUJQp12uizajwdIUOus+H5PtbfXI/NRmuduWIDnxXFJiTDHrJEEG3WY7wY0EYC3hrWlMKPCwm5
vDFY5kIsOWl8b6j8LoMIAQoCFOBJyIFUlNL1Jov7N+dpv1rim4E2zTEYHw4ppvb/YMPbSFwru8QRF8Q1
2wD9tHVM9XUYXaoObY1M+PWrKymbYaETdcJC8lrp8lm8trJst1tD21hhk3ipvRA+gzkNiJyYwy86qPTJ
IYvzhXhHW/yP2ohSmTvyD2hUHTL27+Q0Ca00Gq1t1GwPbgQb5q93gU8lFRSmpD6erewP+MArfqWHZKHT
JkYyQ8PmlvdSWOSfxJiYzVo/817XLuqzxzONjsPLplwy68wHFZJ3Sz4QlVuUKltZE/AXvL2+vAKWJbC3
1rj2yIUGiyOCgYYgs/B6RaeCtvmwoktytOdo2l2JkETwjr3sEkzciCH3s5Lc0VWxMjr7zq1sXdPXMnEq
L8iSOtdZz3mc0+yBMewdAB3F2J4fvke2sqvz8N+EuYgdcYPLEDI1amEqnsUMPnPQVZGOGU8nYEZaHAVb
2bsZmiS27RoMp+OzmOGtWYjGudwsPdK7OfSWcrbb2KDS+fXywG4zmiBw3hBcL+1iC08lCkKpuE61dNyu
DwTAiTkUjQ8yT+okXq+HAFvTGdi6PuZUTDs9tqZVSGd5J5NFsRsQo+291qbFbQC0dvvsTwAAAP//ewPA
QV8MAAA=
`,
	},

	"/manifests/php.yml": {
		name:    "php.yml",
		local:   "manifests/php.yml",
		size:    1159,
		modtime: 1543503456,
		compressed: `
H4sIAAAAAAAC/8ySsU7DQAyG9z7FrwzdigrjCVh5AfbolLrU0t0l2L6Kvj1K0zRNCIhuyRbJ/+dP/m+D
5CM5NIdmBXxmUuM6qVsBwAZHL2U3UFR1qrIIJSuzkhTnCcBODTlwssv/jrQSblqKQ/F+IAxB9EETn5RH
m7otGn0IZSfTflWddnxhTQTw/ILH7bYY5SPtOMd/Al7bPNZrzJMn6ODlg+4h/4Z++oGO/ovjHdodYTV3
tL8a3HPyofRivPeV9QU2JMpqlMzBJNNsj2+ZVHGqs+BMQU8BqysGaTWfrDz6kNuFV7GHUww3wqOWFmU8
mE2Ub9tflPFVbHrj0Zta1pEHtU4a+A4AAP//QbLR9YcEAAA=
`,
	},

	"/manifests/plain_vm.yml": {
		name:    "plain_vm.yml",
		local:   "manifests/plain_vm.yml",
		size:    165,
		modtime: 1543503459,
		compressed: `
H4sIAAAAAAAC/zTOwanEMAwE0HuqGHzPL8AN/DKMyCogcGSvJBvS/ZKEXIfhzaxQOjijVxIt81iA72AP
aep5AVZMsvJ00i5KtZCF7LRFWgCgs7l4sEZG2OA7/LBvJv1SMtL/YHecbRhuAa8A8fwoW1MP0iiT6rim
3j9/51HTLwAA//92kVu5pQAAAA==
`,
	},

	"/manifests": {
		name:  "manifests",
		local: `manifests`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"manifests": {
		_escData["/manifests/error.yml"],
		_escData["/manifests/java.yml"],
		_escData["/manifests/jmeter.yml"],
		_escData["/manifests/kubernetes.yml"],
		_escData["/manifests/load_test.yml"],
		_escData["/manifests/main.yml"],
		_escData["/manifests/php.yml"],
		_escData["/manifests/plain_vm.yml"],
	},
}
